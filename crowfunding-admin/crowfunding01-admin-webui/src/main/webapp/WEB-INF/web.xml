<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-persist-*.xml</param-value>
  </context-param>

  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--指定字符集-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <!--强制请求设置字符集-->
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <!--强制响应设置字符集-->
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <!--这个Filter执行的顺序要在其他Filter前面-->
  <!--原因如下：-->
  <!--request.setCharacterEncoding(encoding)必须在request.getParameter()前面-->
  <!--response.setCharacterEncoding(encoding)必须在response.getParameter()前面-->
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!--注册监听器-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-web-mvc.xml</param-value>
    </init-param>
    <!--servlet默认生命周期中创建对象是在第一次接收到请求时-->
    <!--而DispatcherServlet创建对象后有大量的框架初始化的工作，不适合在第一次请求时来做-->
    <!--设置load-on-startup，就是为了让DispatcherServlet在web应用启动时创建对象、初始化-->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <!-- 请求后面必须带上 .html 不然访问不到 -->
  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <!--配置方式2：配置请求扩展名-->
    <!--优点1：静态资源完全不经过SpringMVC，不需要特殊处理-->
    <!--优点2：可以实现伪静态效果。表面上看起来是访问一个HTML文件这样的静态资源，但是实际上是JAVA代码运算后的结果-->
    <!--伪静态作用：1、给黑客入侵增加难度  2、有利于SEO的优化（让百度、谷歌这样的搜索引擎更容易找到我们的项目）-->
    <!--缺点：不符合RESTFul风格-->
    <url-pattern>*.html</url-pattern>
    <!--配置方式1：表示拦截所有请求-->
    <!--<url-pattern>/</url-pattern>-->

    <url-pattern>*.json</url-pattern>
    <!--为什么加*.json：如果一个Ajax请求扩展名是html，但是实际服务器给浏览器返回的是json数据，二者就不匹配会出现406错误
      为了让Ajax请求能够顺利拿到JSON格式的响应数据，我们另外配置json扩展名-->
  </servlet-mapping>
</web-app>
